#include "SIM900.h" 
#include "sms.h"
#include <SoftwareSerial.h> 
#include <Wire.h> 

SMSGSM sms;
/* DEFINE */
/* DS-1307 */
const byte DS1307 = 0x68;       /* Ð?a ch? c?a DS1307 */
const byte NumberOfFields = 7;  /* S? byte d? li?u s? d?c t? DS1307 */
int currentSecond = 0;
int second, minute, hour, day, wday, month, year; /* khai báo các bi?n th?i gian */
/* Module SIM */
boolean started = false;    /* tr?ng thái module SIM */
char number[20];            /* s? di?n tho?i format theo d?nh d?ng qu?c t? */
char smstext[160];           /* n?i dung tin nh?n d?n */
int primaryAsset = 0;
/* Node */
byte node = 12;      /* chân Uno di?u khi?n node */
int nodeSession = 0; /* phiên làm vi?c c?a node */
boolean nodeStatus = false;  /* tr?ng thái node */
int nodeDuration = 0;/* th?i gian ho?t d?ng */

/* DEVELOPING FUNCTION */
/* convert SÐT thành s? Integer d? luu session */
int numberToInt(){
  int num = 0;
  for (int i=3; i< sizeof(number); i++)
    num = num*10 + ((int)number[i] - 48);
  return num;
}
/* ki?m tra tài kho?n chính, g?i tin nh?n khi TKC < 10000 */
void primaryAssetChecking(){
  gsm.SimpleWriteln("AT+CUSD = 1,\"*101#\"");
  delay(5000);          // d?i 5s d? nhà m?ng ph?n h?i
  char resp[40];        // kh?i t?o chu?i ch?a n?i dung tr? v?
  gsm.read(resp, 100);  // l?y n?i dung tr? v?
  int i = 31;
  while (resp[i+1] != ' '){
    primaryAsset = primaryAsset*10 + ((int)resp[i] - 48);
    i++;
  }
  if (primaryAsset < 10000)
    sms.SendSMS(number, "Tai khoan chinh sap het. Vui long nap them tien de duy tri hoat dong.");
  nodeDuration = nodeDuration - 5;
}
/* tr? v? giá tr? session hi?n t?i */
int getSession(){
  return nodeSession;
}
/* thay d?i giá tr? session */
void setSession(int changeTo){
  nodeSession = changeTo;
}
/* tr? v? status hi?n t?i c?a node */
boolean getStatus(){
  return nodeStatus;
}
/* thay d?i tr?ng thái c?a node */
void changeStatus(){
  if (nodeStatus == true){
    digitalWrite(node,LOW);
    setSession(0);
    setDuration(0);
  } else {
      digitalWrite(node,HIGH);
  }
  nodeStatus = !nodeStatus;
}
/* thay d?i giá tr? DURATION trong phiên */
void setDuration(int dur){
  nodeDuration = dur;
}
/* d?m ngu?c th?i gian ho?t d?ng trong phiên, b?t d?u t? giá tr? DURATION và k?t thúc phiên khi d?t giá tr? 0 */
void nodeDurationCountdown(){
  nodeDuration--;
  if (nodeDuration == 0)
    changeStatus();
  if (nodeDuration < 0)
    setDuration(0);
}
/* tr? v? giá tr? MODE c?a SMS */
int getModeFrSMS(){
  return (int)smstext[15] - 48;
}
/* tr? v? giá tr? STATUS c?a SMS */
int getStatusFrSMS(){
  return (int)smstext[14] - 48;
}
/* tr? v? giá tr? WDAY c?a SMS */
int getWDayFrSMS(){
  return (int)smstext[7] - 48;
}
/* tr? v? giá tr? YEAR c?a SMS */
int getYearFrSMS(){
  int year = (int)smstext[8] - 48;
  year = year*10 + ((int)smstext[9] - 48);
  return year+2000;
}
/* tr? v? giá tr? MONTH c?a SMS */
int getMonthFrSMS(){
  int month = (int)smstext[10] - 48;
  month = month*10 + ((int)smstext[11] - 48);
  return month;
}
/* tr? v? giá tr? DAY c?a SMS */
int getDayFrSMS(){
  int day = (int)smstext[12] - 48;
  day = day*10 + ((int)smstext[13] - 48);
  return day;
}
/* tr? v? giá tr? HOUR c?a SMS */
int getHourFrSMS(){
  int hour = (int)smstext[5] - 48;
  hour = hour*10 + ((int)smstext[6] - 48);
  return hour;
}
/* tr? v? giá tr? MINUTE c?a SMS */
int getMinuteFrSMS(){
  int minute = (int)smstext[3] - 48;
  minute = minute*10 + ((int)smstext[4] - 48);
  return minute;
}
/* tr? v? giá tr? DURATION c?a SMS */
int getDurationFrSMS(){
  int duration = (int)smstext[0] - 48;
  for(int i=1; i<=2; i++){
    duration = duration*10 + ((int)smstext[i] - 48);
  }
  return duration*60;
}
/* tr? v? giá tr? SECOND c?a SMS */
int getSecondFrSMS(){
  int second = (int)smstext[0] - 48;
  for(int i=1; i<=2; i++){
    second = second*10 + ((int)smstext[i] - 48);
  }
  return second;
}

/* DS1307 FUNCTION */
/* Chuy?n t? format BCD (Binary-Coded Decimal) sang Decimal */
int bcd2dec(byte num){
  return ((num/16 * 10) + (num % 16));
}
/* Chuy?n t? Decimal sang BCD */
int dec2bcd(byte num){
  return ((num/10 * 16) + (num % 10));
}
/* Ð?c d? li?u c?a DS1307 */
void readDS1307(){
  Wire.beginTransmission(DS1307);
  Wire.write((byte)0x00);
  Wire.endTransmission();
  Wire.requestFrom(DS1307, NumberOfFields);
  second = bcd2dec(Wire.read() & 0x7f);
  minute = bcd2dec(Wire.read() );
  hour   = bcd2dec(Wire.read() & 0x3f); // ch? d? 24h.
  wday   = bcd2dec(Wire.read() );
  day    = bcd2dec(Wire.read() );
  month  = bcd2dec(Wire.read() );
  year   = bcd2dec(Wire.read() );
  year += 2000;
}
/* cài d?t th?i gian cho DS1307 */
void setTime(byte hr, byte min, byte sec, byte wd, byte d, byte mth, byte yr){
  Wire.beginTransmission(DS1307);
  Wire.write(byte(0x00)); // d?t l?i pointer
  Wire.write(dec2bcd(sec));
  Wire.write(dec2bcd(min));
  Wire.write(dec2bcd(hr));
  Wire.write(dec2bcd(wd)); // day of week: Sunday = 1, Saturday = 7
  Wire.write(dec2bcd(d)); 
  Wire.write(dec2bcd(mth));
  Wire.write(dec2bcd(yr));
  Wire.endTransmission();
}
/* Dùng xong xóa */
void digitalClockDisplay(){
  Serial.print(hour);
  printDigits(minute);
  printDigits(second);
  Serial.print(" ");
  Serial.print(day);
  Serial.print(" ");
  Serial.print(month);
  Serial.print(" ");
  Serial.print(year); 
  Serial.println(); 
}
void printDigits(int digits){
  // các thành ph?n th?i gian du?c ngan chách b?ng d?u :
  Serial.print(":");

  if(digits < 10)
      Serial.print('0');
  Serial.print(digits);
}
/* END-DS1307 FUNCTION */

/* TEST FUNCTION */
void testResult(){
  Serial.print("Node status: ");
  Serial.println(getStatus());
  Serial.print("Node session: ");
  Serial.println(getSession());
  Serial.print("Node duration: ");
  Serial.println(nodeDuration);
  Serial.print("Primary Asset: ");
  Serial.println(primaryAsset);
}

void setupDS1307(){
  Wire.begin();
  /* cài d?t th?i gian cho module - dùng cho l?n d?u */
  //setTime(11, 27, 00, 7, 5, 8, 17); // 07:52:00 CN 11-06-2017
  Serial.begin(9600);
  Serial.println("\nDS1307 is now running.");
}
void setupSIM(){
  Serial.begin(9600);
  Serial.println("\nGui va nhan tin nhan");
  if (gsm.begin(2400)){     
    Serial.println("\nstatus=READY");     
    started=true;
  } else {
    Serial.println("\nstatus=IDLE");
  }
  if(started){     
    Serial.println("\nThiet bi da san sang.");
    sms.SendSMS("+841686451311", "Online");
    pinMode(13,OUTPUT);
    digitalWrite(13,HIGH); /* dèn sáng khi s?n sàng nh?n sms */
  }
}
void setupNode(){
    pinMode(node,OUTPUT);   //Chân NODE là OUTPUT
    digitalWrite(node,LOW); //M?c d?nh NODE s? ? tr?ng thái OFF
}
void setup() {
  setupDS1307();
  setupSIM();
  setupNode();
}

void loop() {
  if(started){
    readDS1307(); /* Ð?c d? li?u c?a DS1307 */
    if (currentSecond != second){
      digitalClockDisplay();
      testResult();
      nodeDurationCountdown();
      currentSecond = second;
      int pos;      /* d?a ch? b? nh? SIM (SIM luu t?i da 40 sms nên max pos = 40) */
      pos = sms.IsSMSPresent(SMS_UNREAD); /* ki?m tra tin nh?n chua d?c trong b? nh? */
                                          /* hàm này s? tr? v? giá tr? trong kho?ng t? 0-40 */
      if(pos){//n?u có tin nh?n chua d?c
        if(sms.GetSMS(pos, number, smstext, 160)){
          /* Test */
          Serial.print("\nSMS from ");
          Serial.print(number);
          Serial.print(" : ");
          Serial.println(smstext);
          /* End-Test */
          switch (getModeFrSMS()){
            case 1: /* di?u khi?n b?ng tay */
              if (getStatusFrSMS() == 1){
                if (getStatus() == false){
                  changeStatus();
                  setSession(numberToInt());
                  setDuration(getDurationFrSMS());
                } else {
                  sms.SendSMS(number, "Thiet bi dang hoat dong.");
                  primaryAssetChecking();
                }
              } else {
                  if (getSession() == numberToInt())
                    changeStatus();
                  else {
                    sms.SendSMS(number, "Thiet bi dang hoat dong o phien khac.");
                    primaryAssetChecking();
                  }
              }
              break;
            case 2: /* d?t l?ch */
              
              break;
            case 3: /* d?ng b? th?i gian th?c */
              
              break;
            default: /* AdSMS, spamSMS, ... */
              return;
          }
        }
        sms.DeleteSMS(byte(pos));//xóa sms v?a nh?n, tránh tràn b? nh?
      }
    }
  } else Serial.println("Offline");
}